#!/usr/bin/env python3
"""
Script pour v√©rifier que tous les services de la base de donn√©es PostgreSQL
sont correctement r√©cup√©r√©s et affich√©s dans l'interface Flutter.
"""

import psycopg2
import re

def get_database_services():
    """R√©cup√®re tous les services depuis la base de donn√©es PostgreSQL"""
    try:
        conn = psycopg2.connect(
            host="localhost",
            database="Fibaya",
            user="postgres",
            password="5334"
        )
        cur = conn.cursor()
        cur.execute("SELECT name FROM services ORDER BY name;")
        services = [row[0] for row in cur.fetchall()]
        cur.close()
        conn.close()
        return services
    except Exception as e:
        print(f"Erreur lors de la connexion √† la base de donn√©es: {e}")
        return []

def get_flutter_services():
    """Extrait les services du fichier service_service.dart"""
    try:
        with open('/Users/macbook/Desktop/fibaya_mina/lib/prestataire_app/services/service_service.dart', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Extraire les noms des services depuis le code
        services = []
        # Chercher les patterns "name: 'Service Name'"
        pattern = r"name:\s*'([^']+)'"
        matches = re.findall(pattern, content)
        services.extend(matches)
        
        return services
    except Exception as e:
        print(f"Erreur lors de la lecture du fichier Flutter: {e}")
        return []

def main():
    print("üîç V√©rification des services...")
    print("=" * 50)
    
    # R√©cup√©rer les services de la base de donn√©es
    db_services = get_database_services()
    print(f"üìä Services dans la base de donn√©es: {len(db_services)}")
    
    # R√©cup√©rer les services du code Flutter
    flutter_services = get_flutter_services()
    print(f"üì± Services dans le code Flutter: {len(flutter_services)}")
    
    print("\nüîç Comparaison des services:")
    print("-" * 30)
    
    # Convertir en sets pour faciliter la comparaison
    db_set = set(db_services)
    flutter_set = set(flutter_services)
    
    # Services manquants dans Flutter
    missing_in_flutter = db_set - flutter_set
    if missing_in_flutter:
        print(f"‚ùå Services manquants dans Flutter ({len(missing_in_flutter)}):")
        for service in sorted(missing_in_flutter):
            print(f"   - {service}")
    else:
        print("‚úÖ Tous les services de la base de donn√©es sont pr√©sents dans Flutter")
    
    # Services suppl√©mentaires dans Flutter
    extra_in_flutter = flutter_set - db_set
    if extra_in_flutter:
        print(f"‚ö†Ô∏è  Services suppl√©mentaires dans Flutter ({len(extra_in_flutter)}):")
        for service in sorted(extra_in_flutter):
            print(f"   - {service}")
    else:
        print("‚úÖ Aucun service suppl√©mentaire dans Flutter")
    
    # Services communs
    common_services = db_set & flutter_set
    print(f"‚úÖ Services communs: {len(common_services)}")
    
    print("\nüìã R√©sum√©:")
    print(f"   Base de donn√©es: {len(db_services)} services")
    print(f"   Code Flutter: {len(flutter_services)} services")
    print(f"   Correspondance: {len(common_services)}/{len(db_services)} ({len(common_services)/len(db_services)*100:.1f}%)")
    
    if len(common_services) == len(db_services) and len(extra_in_flutter) == 0:
        print("\nüéâ SUCC√àS: Tous les services sont correctement synchronis√©s!")
    else:
        print("\n‚ö†Ô∏è  ATTENTION: Il y a des diff√©rences entre la base de donn√©es et le code Flutter")

if __name__ == "__main__":
    main()
