import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../common/utils/phone_validation.dart';
import 'prestataire_sms_verification_screen.dart';

class PrestataireAuthScreen extends StatefulWidget {
  const PrestataireAuthScreen({super.key});

  @override
  State<PrestataireAuthScreen> createState() => _PrestataireAuthScreenState();
}

class _PrestataireAuthScreenState extends State<PrestataireAuthScreen>
    with TickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  final _phoneController = TextEditingController();
  bool _isLoading = false;
  bool _showContent = false;
  String _selectedCountryCode = '+221'; // SÃ©nÃ©gal par dÃ©faut
  String? _phoneError;

  // Animation controllers
  late AnimationController _fadeController;
  late AnimationController _slideController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;

  // Liste des pays avec drapeaux et codes (tous les pays de la base de donnÃ©es)
  final List<Map<String, String>> _countries = [
    // Afrique
    {'name': 'SÃ©nÃ©gal', 'code': '+221', 'flag': 'ğŸ‡¸ğŸ‡³'},
    {'name': 'Mali', 'code': '+223', 'flag': 'ğŸ‡²ğŸ‡±'},
    {'name': 'Burkina Faso', 'code': '+226', 'flag': 'ğŸ‡§ğŸ‡«'},
    {'name': 'CÃ´te d\'Ivoire', 'code': '+225', 'flag': 'ğŸ‡¨ğŸ‡®'},
    {'name': 'GuinÃ©e', 'code': '+224', 'flag': 'ğŸ‡¬ğŸ‡³'},
    {'name': 'Gambie', 'code': '+220', 'flag': 'ğŸ‡¬ğŸ‡²'},
    {'name': 'GuinÃ©e-Bissau', 'code': '+245', 'flag': 'ğŸ‡¬ğŸ‡¼'},
    {'name': 'Cap-Vert', 'code': '+238', 'flag': 'ğŸ‡¨ğŸ‡»'},
    {'name': 'Mauritanie', 'code': '+222', 'flag': 'ğŸ‡²ğŸ‡·'},
    {'name': 'Niger', 'code': '+227', 'flag': 'ğŸ‡³ğŸ‡ª'},
    {'name': 'Tchad', 'code': '+235', 'flag': 'ğŸ‡¹ğŸ‡©'},
    {'name': 'Cameroun', 'code': '+237', 'flag': 'ğŸ‡¨ğŸ‡²'},
    {'name': 'Gabon', 'code': '+241', 'flag': 'ğŸ‡¬ğŸ‡¦'},
    {'name': 'Congo', 'code': '+242', 'flag': 'ğŸ‡¨ğŸ‡¬'},
    {'name': 'RÃ©publique dÃ©mocratique du Congo', 'code': '+243', 'flag': 'ğŸ‡¨ğŸ‡©'},
    {'name': 'Centrafrique', 'code': '+236', 'flag': 'ğŸ‡¨ğŸ‡«'},
    {'name': 'Togo', 'code': '+228', 'flag': 'ğŸ‡¹ğŸ‡¬'},
    {'name': 'BÃ©nin', 'code': '+229', 'flag': 'ğŸ‡§ğŸ‡¯'},
    {'name': 'Nigeria', 'code': '+234', 'flag': 'ğŸ‡³ğŸ‡¬'},
    {'name': 'Ghana', 'code': '+233', 'flag': 'ğŸ‡¬ğŸ‡­'},
    {'name': 'Liberia', 'code': '+231', 'flag': 'ğŸ‡±ğŸ‡·'},
    {'name': 'Sierra Leone', 'code': '+232', 'flag': 'ğŸ‡¸ğŸ‡±'},
    {'name': 'Maroc', 'code': '+212', 'flag': 'ğŸ‡²ğŸ‡¦'},
    {'name': 'AlgÃ©rie', 'code': '+213', 'flag': 'ğŸ‡©ğŸ‡¿'},
    {'name': 'Tunisie', 'code': '+216', 'flag': 'ğŸ‡¹ğŸ‡³'},
    {'name': 'Ã‰gypte', 'code': '+20', 'flag': 'ğŸ‡ªğŸ‡¬'},
    {'name': 'Afrique du Sud', 'code': '+27', 'flag': 'ğŸ‡¿ğŸ‡¦'},
    {'name': 'Kenya', 'code': '+254', 'flag': 'ğŸ‡°ğŸ‡ª'},
    {'name': 'Ã‰thiopie', 'code': '+251', 'flag': 'ğŸ‡ªğŸ‡¹'},
    {'name': 'Ouganda', 'code': '+256', 'flag': 'ğŸ‡ºğŸ‡¬'},
    {'name': 'Tanzanie', 'code': '+255', 'flag': 'ğŸ‡¹ğŸ‡¿'},
    {'name': 'Rwanda', 'code': '+250', 'flag': 'ğŸ‡·ğŸ‡¼'},
    {'name': 'Burundi', 'code': '+257', 'flag': 'ğŸ‡§ğŸ‡®'},
    {'name': 'Madagascar', 'code': '+261', 'flag': 'ğŸ‡²ğŸ‡¬'},
    {'name': 'Maurice', 'code': '+230', 'flag': 'ğŸ‡²ğŸ‡º'},
    {'name': 'Seychelles', 'code': '+248', 'flag': 'ğŸ‡¸ğŸ‡¨'},
    {'name': 'Comores', 'code': '+269', 'flag': 'ğŸ‡°ğŸ‡²'},
    {'name': 'Djibouti', 'code': '+253', 'flag': 'ğŸ‡©ğŸ‡¯'},
    {'name': 'Somalie', 'code': '+252', 'flag': 'ğŸ‡¸ğŸ‡´'},
    {'name': 'Soudan', 'code': '+249', 'flag': 'ğŸ‡¸ğŸ‡©'},
    {'name': 'Soudan du Sud', 'code': '+211', 'flag': 'ğŸ‡¸ğŸ‡¸'},
    {'name': 'Ã‰rythrÃ©e', 'code': '+291', 'flag': 'ğŸ‡ªğŸ‡·'},
    {'name': 'Zimbabwe', 'code': '+263', 'flag': 'ğŸ‡¿ğŸ‡¼'},
    {'name': 'Zambie', 'code': '+260', 'flag': 'ğŸ‡¿ğŸ‡²'},
    {'name': 'Botswana', 'code': '+267', 'flag': 'ğŸ‡§ğŸ‡¼'},
    {'name': 'Namibie', 'code': '+264', 'flag': 'ğŸ‡³ğŸ‡¦'},
    {'name': 'Angola', 'code': '+244', 'flag': 'ğŸ‡¦ğŸ‡´'},
    {'name': 'Mozambique', 'code': '+258', 'flag': 'ğŸ‡²ğŸ‡¿'},
    {'name': 'Malawi', 'code': '+265', 'flag': 'ğŸ‡²ğŸ‡¼'},
    {'name': 'Lesotho', 'code': '+266', 'flag': 'ğŸ‡±ğŸ‡¸'},
    {'name': 'Eswatini', 'code': '+268', 'flag': 'ğŸ‡¸ğŸ‡¿'},
    {'name': 'SÃ£o TomÃ©-et-PrÃ­ncipe', 'code': '+239', 'flag': 'ğŸ‡¸ğŸ‡¹'},
    {'name': 'GuinÃ©e Ã©quatoriale', 'code': '+240', 'flag': 'ğŸ‡¬ğŸ‡¶'},
    
    // Europe
    {'name': 'France', 'code': '+33', 'flag': 'ğŸ‡«ğŸ‡·'},
    {'name': 'Belgique', 'code': '+32', 'flag': 'ğŸ‡§ğŸ‡ª'},
    {'name': 'Suisse', 'code': '+41', 'flag': 'ğŸ‡¨ğŸ‡­'},
    {'name': 'Pays-Bas', 'code': '+31', 'flag': 'ğŸ‡³ğŸ‡±'},
    {'name': 'SuÃ¨de', 'code': '+46', 'flag': 'ğŸ‡¸ğŸ‡ª'},
    {'name': 'NorvÃ¨ge', 'code': '+47', 'flag': 'ğŸ‡³ğŸ‡´'},
    {'name': 'Danemark', 'code': '+45', 'flag': 'ğŸ‡©ğŸ‡°'},
    {'name': 'Finlande', 'code': '+358', 'flag': 'ğŸ‡«ğŸ‡®'},
    {'name': 'Pologne', 'code': '+48', 'flag': 'ğŸ‡µğŸ‡±'},
    {'name': 'RÃ©publique tchÃ¨que', 'code': '+420', 'flag': 'ğŸ‡¨ğŸ‡¿'},
    {'name': 'Hongrie', 'code': '+36', 'flag': 'ğŸ‡­ğŸ‡º'},
    {'name': 'Roumanie', 'code': '+40', 'flag': 'ğŸ‡·ğŸ‡´'},
    {'name': 'Bulgarie', 'code': '+359', 'flag': 'ğŸ‡§ğŸ‡¬'},
    {'name': 'GrÃ¨ce', 'code': '+30', 'flag': 'ğŸ‡¬ğŸ‡·'},
    {'name': 'Portugal', 'code': '+351', 'flag': 'ğŸ‡µğŸ‡¹'},
    {'name': 'Espagne', 'code': '+34', 'flag': 'ğŸ‡ªğŸ‡¸'},
    {'name': 'Italie', 'code': '+39', 'flag': 'ğŸ‡®ğŸ‡¹'},
    {'name': 'Royaume-Uni', 'code': '+44', 'flag': 'ğŸ‡¬ğŸ‡§'},
    {'name': 'Allemagne', 'code': '+49', 'flag': 'ğŸ‡©ğŸ‡ª'},
    {'name': 'Autriche', 'code': '+43', 'flag': 'ğŸ‡¦ğŸ‡¹'},
    {'name': 'Turquie', 'code': '+90', 'flag': 'ğŸ‡¹ğŸ‡·'},
    {'name': 'Russie', 'code': '+7', 'flag': 'ğŸ‡·ğŸ‡º'},
    {'name': 'Ukraine', 'code': '+380', 'flag': 'ğŸ‡ºğŸ‡¦'},
    {'name': 'Albanie', 'code': '+355', 'flag': 'ğŸ‡¦ğŸ‡±'},
    {'name': 'Andorre', 'code': '+376', 'flag': 'ğŸ‡¦ğŸ‡©'},
    
    // AmÃ©rique du Nord
    {'name': 'Ã‰tats-Unis', 'code': '+1', 'flag': 'ğŸ‡ºğŸ‡¸'},
    {'name': 'Canada', 'code': '+1', 'flag': 'ğŸ‡¨ğŸ‡¦'},
    
    // AmÃ©rique du Sud
    {'name': 'BrÃ©sil', 'code': '+55', 'flag': 'ğŸ‡§ğŸ‡·'},
    {'name': 'Argentine', 'code': '+54', 'flag': 'ğŸ‡¦ğŸ‡·'},
    
    // Asie
    {'name': 'Chine', 'code': '+86', 'flag': 'ğŸ‡¨ğŸ‡³'},
    {'name': 'Japon', 'code': '+81', 'flag': 'ğŸ‡¯ğŸ‡µ'},
    {'name': 'Inde', 'code': '+91', 'flag': 'ğŸ‡®ğŸ‡³'},
    {'name': 'CorÃ©e du Sud', 'code': '+82', 'flag': 'ğŸ‡°ğŸ‡·'},
    {'name': 'CorÃ©e du Nord', 'code': '+850', 'flag': 'ğŸ‡°ğŸ‡µ'},
    {'name': 'Mongolie', 'code': '+976', 'flag': 'ğŸ‡²ğŸ‡³'},
    {'name': 'Kazakhstan', 'code': '+7', 'flag': 'ğŸ‡°ğŸ‡¿'},
    {'name': 'OuzbÃ©kistan', 'code': '+998', 'flag': 'ğŸ‡ºğŸ‡¿'},
    {'name': 'Kirghizistan', 'code': '+996', 'flag': 'ğŸ‡°ğŸ‡¬'},
    {'name': 'Tadjikistan', 'code': '+992', 'flag': 'ğŸ‡¹ğŸ‡¯'},
    {'name': 'TurkmÃ©nistan', 'code': '+993', 'flag': 'ğŸ‡¹ğŸ‡²'},
    {'name': 'Afghanistan', 'code': '+93', 'flag': 'ğŸ‡¦ğŸ‡«'},
    {'name': 'Pakistan', 'code': '+92', 'flag': 'ğŸ‡µğŸ‡°'},
    {'name': 'Bangladesh', 'code': '+880', 'flag': 'ğŸ‡§ğŸ‡©'},
    {'name': 'Sri Lanka', 'code': '+94', 'flag': 'ğŸ‡±ğŸ‡°'},
    {'name': 'NÃ©pal', 'code': '+977', 'flag': 'ğŸ‡³ğŸ‡µ'},
    {'name': 'Bhoutan', 'code': '+975', 'flag': 'ğŸ‡§ğŸ‡¹'},
    {'name': 'Maldives', 'code': '+960', 'flag': 'ğŸ‡²ğŸ‡»'},
    {'name': 'ThaÃ¯lande', 'code': '+66', 'flag': 'ğŸ‡¹ğŸ‡­'},
    {'name': 'Vietnam', 'code': '+84', 'flag': 'ğŸ‡»ğŸ‡³'},
    {'name': 'Cambodge', 'code': '+855', 'flag': 'ğŸ‡°ğŸ‡­'},
    {'name': 'Laos', 'code': '+856', 'flag': 'ğŸ‡±ğŸ‡¦'},
    {'name': 'Myanmar', 'code': '+95', 'flag': 'ğŸ‡²ğŸ‡²'},
    {'name': 'Malaisie', 'code': '+60', 'flag': 'ğŸ‡²ğŸ‡¾'},
    {'name': 'Singapour', 'code': '+65', 'flag': 'ğŸ‡¸ğŸ‡¬'},
    {'name': 'IndonÃ©sie', 'code': '+62', 'flag': 'ğŸ‡®ğŸ‡©'},
    {'name': 'Philippines', 'code': '+63', 'flag': 'ğŸ‡µğŸ‡­'},
    
    // Moyen-Orient
    {'name': 'Arabie saoudite', 'code': '+966', 'flag': 'ğŸ‡¸ğŸ‡¦'},
    {'name': 'Ã‰mirats arabes unis', 'code': '+971', 'flag': 'ğŸ‡¦ğŸ‡ª'},
    {'name': 'Qatar', 'code': '+974', 'flag': 'ğŸ‡¶ğŸ‡¦'},
    {'name': 'KoweÃ¯t', 'code': '+965', 'flag': 'ğŸ‡°ğŸ‡¼'},
    {'name': 'BahreÃ¯n', 'code': '+973', 'flag': 'ğŸ‡§ğŸ‡­'},
    {'name': 'Oman', 'code': '+968', 'flag': 'ğŸ‡´ğŸ‡²'},
    {'name': 'Jordanie', 'code': '+962', 'flag': 'ğŸ‡¯ğŸ‡´'},
    {'name': 'Liban', 'code': '+961', 'flag': 'ğŸ‡±ğŸ‡§'},
    {'name': 'Irak', 'code': '+964', 'flag': 'ğŸ‡®ğŸ‡¶'},
    {'name': 'Iran', 'code': '+98', 'flag': 'ğŸ‡®ğŸ‡·'},
    {'name': 'IsraÃ«l', 'code': '+972', 'flag': 'ğŸ‡®ğŸ‡±'},
    
    // OcÃ©anie
    {'name': 'Australie', 'code': '+61', 'flag': 'ğŸ‡¦ğŸ‡º'},
  ];

  @override
  void initState() {
    super.initState();

    // Initialize animations
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _slideController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(parent: _fadeController, curve: Curves.easeOut));

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.3),
      end: Offset.zero,
    ).animate(CurvedAnimation(parent: _slideController, curve: Curves.easeOut));

    // Start animations
    _fadeController.forward();
    _slideController.forward();

    // Show content after a delay
    Future.delayed(const Duration(milliseconds: 300), () {
      if (mounted) {
        setState(() {
          _showContent = true;
        });
      }
    });
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _slideController.dispose();
    _phoneController.dispose();
    super.dispose();
  }

  // Validation sÃ©curisÃ©e des numÃ©ros de tÃ©lÃ©phone
  String? _validatePhoneNumber(String? value) {
    if (value == null || value.isEmpty) {
      return 'Veuillez entrer votre numÃ©ro';
    }

    // Trouver le pays sÃ©lectionnÃ©
    String selectedCountryName = '';
    for (Map<String, String> country in _countries) {
      if (country['code'] == _selectedCountryCode) {
        selectedCountryName = country['name']!;
        break;
      }
    }

    if (selectedCountryName.isEmpty) {
      return 'NumÃ©ro invalide';
    }

    // Utiliser la validation spÃ©cifique par pays
    return PhoneValidation.validatePhoneNumber(value, selectedCountryName);
  }

  // Obtenir la longueur attendue du numÃ©ro de tÃ©lÃ©phone
  int _getExpectedPhoneLength() {
    String selectedCountryName = '';
    for (Map<String, String> country in _countries) {
      if (country['code'] == _selectedCountryCode) {
        selectedCountryName = country['name']!;
        break;
      }
    }

    if (selectedCountryName.isEmpty) return 15; // Valeur par dÃ©faut

    final format = PhoneValidation.getCountryFormat(selectedCountryName);
    return format?.totalDigits ?? 15;
  }

  Future<void> _submitPhoneNumber() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      // Simulate API call
      await Future.delayed(const Duration(milliseconds: 1500));

      if (mounted) {
        setState(() {
          _isLoading = false;
        });

        // Navigate to SMS verification
        Navigator.of(context).push(
          PageRouteBuilder(
            pageBuilder: (context, animation, secondaryAnimation) =>
                PrestataireSmsVerificationScreen(
                  phone: _phoneController.text,
                  countryCode: _selectedCountryCode,
                ),
            transitionsBuilder:
                (context, animation, secondaryAnimation, child) {
                  return FadeTransition(
                    opacity: animation,
                    child: SlideTransition(
                      position:
                          Tween<Offset>(
                            begin: const Offset(1.0, 0.0),
                            end: Offset.zero,
                          ).animate(
                            CurvedAnimation(
                              parent: animation,
                              curve: Curves.easeInOutCubic,
                            ),
                          ),
                      child: child,
                    ),
                  );
                },
            transitionDuration: const Duration(milliseconds: 600),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF8F9FA), // bg-secondary/30
      body: SafeArea(
        child: FadeTransition(
          opacity: _fadeAnimation,
          child: SlideTransition(
            position: _slideAnimation,
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: Column(
                  children: [
                    const SizedBox(height: 40), // Remonte la section logo/titre
                    // Logo header (EXACT like Lovable - fade-in-up 0.6s ease-out)
                    Transform.translate(
                      offset: Offset(0, _showContent ? 0 : 30),
                      child: Opacity(
                        opacity: _showContent ? 1.0 : 0.0,
                        child: Center(
                          child: Column(
                            children: [
                              Container(
                                width: 64,
                                height: 64,
                                decoration: BoxDecoration(
                                  gradient: const LinearGradient(
                                    begin: Alignment.topLeft,
                                    end: Alignment.bottomRight,
                                    colors: [
                                      Color(0xFF065b32),
                                      Color(0xFF0a7a42),
                                    ],
                                  ),
                                  borderRadius: BorderRadius.circular(16),
                                  boxShadow: [
                                    BoxShadow(
                                      color: const Color(
                                        0xFF065b32,
                                      ).withOpacity(0.15),
                                      blurRadius: 20,
                                      spreadRadius: 0,
                                      offset: const Offset(0, 10),
                                    ),
                                  ],
                                ),
                                child: const Center(
                                  child: Text(
                                    'F',
                                    style: TextStyle(
                                      fontSize: 24,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                              ),
                              const SizedBox(height: 16),
                              const Text(
                                'FIBAYA',
                                style: TextStyle(
                                  fontSize: 24,
                                  fontWeight: FontWeight.bold,
                                  color: Color(0xFF065b32),
                                ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                'Authentification Prestataire',
                                style: TextStyle(
                                  fontSize: 14,
                                  color: Colors.grey[600],
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),

                    const SizedBox(height: 32),

                    // Card (like Lovable)
                    Container(
                      width: double.infinity,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(16),
                        boxShadow: [
                          BoxShadow(
                            color: const Color(0xFF065b32).withOpacity(0.08),
                            blurRadius: 20,
                            spreadRadius: 0,
                            offset: const Offset(0, 4),
                          ),
                        ],
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(24.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Card Header
                            const Center(
                              child: Column(
                                children: [
                                  Text(
                                    'NumÃ©ro de tÃ©lÃ©phone',
                                    style: TextStyle(
                                      fontSize: 20,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black87,
                                    ),
                                  ),
                                  SizedBox(height: 8),
                                  Text(
                                    'Entrez votre numÃ©ro pour recevoir un code de vÃ©rification',
                                    style: TextStyle(
                                      fontSize: 14,
                                      color: Colors.grey,
                                    ),
                                    textAlign: TextAlign.center,
                                  ),
                                ],
                              ),
                            ),

                            const SizedBox(height: 24),

                            // Phone input with country selector (like Prestataire)
                            Row(
                              children: [
                                // Country selector
                                Expanded(
                                  flex: 1,
                                  child: DropdownButtonFormField<String>(
                                    value: _selectedCountryCode,
                                    decoration: const InputDecoration(
                                      border: OutlineInputBorder(
                                        borderRadius: BorderRadius.all(
                                          Radius.circular(12),
                                        ),
                                      ),
                                      focusedBorder: OutlineInputBorder(
                                        borderRadius: BorderRadius.all(
                                          Radius.circular(12),
                                        ),
                                        borderSide: BorderSide(
                                          color: Color(0xFF065b32),
                                          width: 2,
                                        ),
                                      ),
                                    ),
                                    // Affichage dans le menu fermÃ© : Drapeau + Code
                                    selectedItemBuilder: (BuildContext context) {
                                      return _countries.map<Widget>((country) {
                                        return Text(
                                          '${country['flag']} ${country['code']}',
                                          style: const TextStyle(fontSize: 14),
                                          overflow: TextOverflow.ellipsis,
                                        );
                                      }).toList();
                                    },
                                    // Affichage dans le menu ouvert : Drapeau + Nom
                                    items: _countries.map((country) {
                                      return DropdownMenuItem(
                                        value: country['code'],
                                        child: Text(
                                          '${country['flag']} ${country['name']}',
                                          style: const TextStyle(fontSize: 16),
                                          overflow: TextOverflow.ellipsis,
                                        ),
                                      );
                                    }).toList(),
                                    onChanged: (value) {
                                      setState(() {
                                        _selectedCountryCode = value ?? '+221';
                                        // Revalider le numÃ©ro de tÃ©lÃ©phone quand le pays change
                                        if (_phoneController.text.isNotEmpty) {
                                          _validatePhoneNumber(
                                            _phoneController.text,
                                          );
                                        }
                                      });
                                    },
                                  ),
                                ),
                                const SizedBox(width: 8),
                                Expanded(
                                  flex: 3,
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      TextFormField(
                                        controller: _phoneController,
                                        maxLength: _getExpectedPhoneLength(),
                                        textDirection: TextDirection.ltr,
                                        textAlign: TextAlign.start,
                                        textInputAction: TextInputAction.done,
                                        enableSuggestions: false,
                                        autocorrect: false,
                                        smartDashesType:
                                            SmartDashesType.disabled,
                                        smartQuotesType:
                                            SmartQuotesType.disabled,
                                        decoration: InputDecoration(
                                          border: const OutlineInputBorder(
                                            borderRadius: BorderRadius.all(
                                              Radius.circular(12),
                                            ),
                                          ),
                                          focusedBorder:
                                              const OutlineInputBorder(
                                                borderRadius: BorderRadius.all(
                                                  Radius.circular(12),
                                                ),
                                                borderSide: BorderSide(
                                                  color: Color(0xFF065b32),
                                                  width: 2,
                                                ),
                                              ),
                                          errorBorder: const OutlineInputBorder(
                                            borderRadius: BorderRadius.all(
                                              Radius.circular(12),
                                            ),
                                            borderSide: BorderSide(
                                              color: Colors.red,
                                              width: 2,
                                            ),
                                          ),
                                          focusedErrorBorder:
                                              const OutlineInputBorder(
                                                borderRadius: BorderRadius.all(
                                                  Radius.circular(12),
                                                ),
                                                borderSide: BorderSide(
                                                  color: Colors.red,
                                                  width: 2,
                                                ),
                                              ),
                                          hintText: 'NumÃ©ro de tÃ©lÃ©phone',
                                          errorText: _phoneError,
                                          counterText:
                                              '', // Masquer le compteur par dÃ©faut
                                        ),
                                        keyboardType: TextInputType.phone,
                                        inputFormatters: [
                                          FilteringTextInputFormatter
                                              .digitsOnly,
                                        ],
                                        onChanged: (value) {
                                          setState(() {
                                            _phoneError = _validatePhoneNumber(
                                              value,
                                            );
                                          });
                                        },
                                        validator: _validatePhoneNumber,
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),

                            const SizedBox(height: 24),

                            // Submit button
                            SizedBox(
                              width: double.infinity,
                              height: 56,
                              child: ElevatedButton(
                                onPressed: _isLoading
                                    ? null
                                    : _submitPhoneNumber,
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: const Color(0xFF065b32),
                                  foregroundColor: Colors.white,
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                  elevation: 0,
                                ),
                                child: _isLoading
                                    ? const SizedBox(
                                        width: 20,
                                        height: 20,
                                        child: CircularProgressIndicator(
                                          strokeWidth: 2,
                                          valueColor:
                                              AlwaysStoppedAnimation<Color>(
                                                Colors.white,
                                              ),
                                        ),
                                      )
                                    : const Text(
                                        'Continuer',
                                        style: TextStyle(
                                          fontSize: 16,
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),

                    const Spacer(),

                    // Footer
                    Text(
                      'En continuant, vous acceptez nos conditions d\'utilisation',
                      style: TextStyle(fontSize: 12, color: Colors.grey[600]),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
